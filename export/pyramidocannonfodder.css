/**
 *------
 * BGA framework: Gregory Isabelli & Emmanuel Colin & BoardGameArena
 * PyramidoCannonFodder implementation : © Marcel van Nieuwenhoven marcel.eindhoven@hotmail.com
 *
 * This code has been produced on the BGA studio platform for use on http://boardgamearena.com.
 * See http://en.boardgamearena.com/#!doc/Studio for more information.
 * -----
 *
 * pyramidocannonfodder.css
 *
 * PyramidoCannonFodder stylesheet
 *
 */

/*
    This is the CSS stylesheet of your game User Interface.
    
    Styles defined on this file will be applied to the HTML elements you define in your
    HTML template (pyramidocannonfodder_pyramidocannonfodder.tpl), and to HTML elements you create dynamically
    (in pyramidocannonfodder.js).
    
    Usually, you are using CSS to:
    
    1°) define the overall layout of your game
        (ex: place the board on the top left, place player's hand beside, place the deck on the right, ...).

    2°) create your CSS-sprites:
        All images of your games should be gathered into a small number of image files. Then, using
        background-image and background-position CSS properties, you create HTML blocks that can 
        display these images correctly (see example below).
    
    3°) ... anything else:
        It is really easy to add and remove CSS classes dynamically from your Javascript with
        dojo.addClass and dojo.removeClass. It is also easy to check if an element has a class
        (dojo.hasClass) or to get all elements with a specific class (dojo.query). This is why,
        very often, using CSS classes for the logic of your user interface allow you to do complex
        thing easily.
        
        
     Note: on the production platform, this file will be compressed and comments will be removed.
           Consequently, don't hesitate to put as many comments as necessary.
*/


/* Note: you must not use any @import directive */


/********* You can start writing your CSS below this line: **********/


/*
    Example of CSS sprites (a black token and a white token, 20x20px each, embedded in the same "tokens.png" 40x20px image):

    .white_token {
        background-image: url('img/tokens.png');
        background-position: 0px 0px;
    }
    .black_token {
        background-image: url('img/tokens.png');
        background-position: -20px 0px;
    }
    .token {
        width: 20px;
        height: 20px;
        background-repeat: none;
    }
*/
.tile {
    background-image: url('img/dominoesx80.png');
    width: 80px;
    height: 80px;
}
.domino80 {
    background-image: url('img/dominoesx80.png');
    width: 160px;
    height: 80px;
}
.domino60 {
    background-image: url('img/dominoesx60.png');
    width: 120px;
    height: 60px;
}
.domino40 {
    background-image: url('img/dominoesx40.png');
    width: 80px;
    height: 40px;
}
.marker {
    background-image: url('img/markersx60.png');
    width: 60px;
    height: 60px;
}
.marker40 {
    background-image: url('img/markersx40.png');
    width: 40px;
    height: 40px;
}
.resurfacing80 {
    background-image: url('img/resurfacesx80.png');
    width: 80px;
    height: 80px;
}
.resurfacing60 {
    background-image: url('img/resurfacesx60.png');
    width: 60px;
    height: 60px;
}
.rotate0 {
    transform: rotate(0deg);
}
.rotate1 {
    transform: rotate(90deg);
}
.rotate2 {
    transform: rotate(180deg);
}
.rotate3 {
    transform: rotate(270deg);
}
.domino_rotate0 {
    transform: rotate(0deg);
}
.domino_rotate1 {
    transform: rotate(90deg);
}
.domino_rotate2 {
    transform: rotate(180deg);
}
.domino_rotate3 {
    transform: translate(-40px, -40px);
    transform: rotate(270deg);
}
.single_card {
    width: 160px;
    height: 80px;
}
.selectable {
    animation: blink-animation 1s steps(5, start) infinite;
    -webkit-animation: blink-animation 1s steps(5, start) infinite;
}
@keyframes blink-animation {
    to {
        opacity: 70%;
    }
}
 @-webkit-keyframes blink-animation {
    to {
        opacity: 70%;
    }
}




